{"version":3,"sources":["audio/ding.mp3","components/InputTime.jsx","components/sliderTime.jsx","components/Timer.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","InputTime","props","isRunning","onMinChange","onSecChange","minutes","seconds","hours","time","Date","type","justify","align","onChange","formatter","val","slice","value","disabled","size","min","max","style","fontSize","SliderTime","onSliderChange","span","step","tipFormatter","tooltipHours","tooltipMinutes","tooltipSeconds","Title","Typography","Timer","state","currentTime","prevTime","endTime","audioEffect","Audio","sound","setState","getUTCMinutes","getUTCSeconds","getUTCHours","handleStart","getMsFromFormattedTime","newEndTime","now","proccessTime","handleEnd","play","handlePause","handleReset","formatDate","date","milliSec","getMilliseconds","sec","getSeconds","getMinutes","hour","requestAnimationFrame","this","progress","startButton","onClick","pauseButton","inputBlock","className","Math","abs","percent","floor","status","Component","defaultProps","TabPane","Tabs","App","defaultActiveKey","tab","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0c5a1f7d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ding.fce0c803.mp3\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Row, Col, InputNumber } from 'antd';\r\n\r\nconst InputTime = props => {\r\n  const { isRunning, onMinChange, onSecChange, minutes, seconds, hours } = props;\r\n  const time = new Date(hours * 60 * 60 * 1000 + minutes * 60 * 1000) / 1000 / 60;\r\n  return (\r\n    <Row type=\"flex\" justify=\"center\" align=\"middle\">\r\n      <Col>\r\n        <InputNumber\r\n          onChange={onMinChange}\r\n          formatter={val => `0${val}`.slice(-2)}\r\n          value={time}\r\n          disabled={isRunning}\r\n          size=\"large\"\r\n          min={0}\r\n          max={719}\r\n        />\r\n      </Col>\r\n      <Col style={{ fontSize: 40 }}>:</Col>\r\n      <Col>\r\n        <InputNumber\r\n          onChange={onSecChange}\r\n          formatter={val => `0${val}`.slice(-2)}\r\n          value={seconds}\r\n          disabled={isRunning}\r\n          size=\"large\"\r\n          min={0}\r\n          max={59}\r\n        />\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nInputTime.propTypes = {\r\n  onMinChange: PropTypes.func.isRequired,\r\n  onSecChange: PropTypes.func.isRequired,\r\n  minutes: PropTypes.number.isRequired,\r\n  seconds: PropTypes.number.isRequired,\r\n  hours: PropTypes.number.isRequired,\r\n  isRunning: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default InputTime;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Row, Col, Slider } from 'antd';\r\n\r\nconst SliderTime = props => {\r\n  const { isRunning, onSliderChange, seconds, minutes, hours } = props;\r\n  const formatTooltip = () => {\r\n    const tooltipHours = `0${hours}`.slice(-2);\r\n    const tooltipMinutes = `0${minutes}`.slice(-2);\r\n    const tooltipSeconds = `0${seconds}`.slice(-2);\r\n    return `${tooltipHours}:${tooltipMinutes}:${tooltipSeconds}`;\r\n  };\r\n  const value = new Date(hours * 60 * 60 * 1000 + minutes * 60 * 1000 + seconds * 1000) / 1000;\r\n  return (\r\n    <Row type=\"flex\" justify=\"center\">\r\n      <Col span={6}>\r\n        <Slider\r\n          step={15}\r\n          max={3600}\r\n          disabled={isRunning}\r\n          value={value}\r\n          onChange={onSliderChange}\r\n          tipFormatter={formatTooltip}\r\n        />\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nSliderTime.propTypes = {\r\n  onSliderChange: PropTypes.func.isRequired,\r\n  minutes: PropTypes.number.isRequired,\r\n  seconds: PropTypes.number.isRequired,\r\n  hours: PropTypes.number.isRequired,\r\n  isRunning: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default SliderTime;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button, Typography, Progress, Row, Col } from 'antd';\r\nimport sound from '../audio/ding.mp3';\r\nimport InputTime from './InputTime';\r\nimport SliderTime from './sliderTime';\r\n\r\nconst { Title } = Typography;\r\n\r\nclass Timer extends Component {\r\n  state = {\r\n    isRunning: false,\r\n    currentTime: 0,\r\n    prevTime: 0,\r\n    endTime: 0,\r\n    minutes: 0,\r\n    seconds: 0,\r\n    hours: 0,\r\n    audioEffect: new Audio(sound),\r\n  };\r\n\r\n  getMsFromFormattedTime() {\r\n    const { hours, minutes, seconds } = this.state;\r\n    return hours * 60 * 60 * 1000 + minutes * 60 * 1000 + seconds * 1000;\r\n  }\r\n\r\n  onSliderChange = value =>\r\n    this.setState({\r\n      minutes: new Date(value * 1000).getUTCMinutes(),\r\n      seconds: new Date(value * 1000).getUTCSeconds(),\r\n      hours: new Date(value * 1000).getUTCHours(),\r\n    });\r\n\r\n  onMinChange = value =>\r\n    this.setState({\r\n      minutes: new Date(value * 1000 * 60).getUTCMinutes(),\r\n      hours: new Date(value * 1000 * 60).getUTCHours(),\r\n    });\r\n\r\n  onSecChange = value =>\r\n    this.setState({\r\n      seconds: value,\r\n    });\r\n\r\n  handleStart = () => {\r\n    const { endTime } = this.state;\r\n    const { type } = this.props;\r\n    if (!this.getMsFromFormattedTime() && type === 'countdown') return;\r\n    const newEndTime = this.getMsFromFormattedTime();\r\n    this.setState(\r\n      {\r\n        isRunning: true,\r\n        prevTime: Date.now(),\r\n        endTime: endTime || newEndTime,\r\n      },\r\n      this.proccessTime\r\n    );\r\n  };\r\n\r\n  handleEnd = () => {\r\n    const { audioEffect } = this.state;\r\n    audioEffect.play();\r\n    this.setState({\r\n      isRunning: false,\r\n      currentTime: 0,\r\n      prevTime: 0,\r\n      endTime: 0,\r\n    });\r\n  };\r\n\r\n  handlePause = () => this.setState({ isRunning: false });\r\n\r\n  handleReset = () =>\r\n    this.setState({\r\n      isRunning: false,\r\n      currentTime: 0,\r\n      prevTime: 0,\r\n      endTime: 0,\r\n    });\r\n\r\n  formatDate = date => {\r\n    const milliSec = `00${new Date(date).getMilliseconds()}`.slice(-3);\r\n    const sec = `0${new Date(date).getSeconds()}`.slice(-2);\r\n    const min = `0${new Date(date).getMinutes()}`.slice(-2);\r\n    const hour = `0${new Date(date).getUTCHours()}`.slice(-2);\r\n    return `${hour}:${min}:${sec}:${milliSec}`;\r\n  };\r\n\r\n  proccessTime = () => {\r\n    const { isRunning, prevTime, currentTime, endTime } = this.state;\r\n    const { type } = this.props;\r\n    if (currentTime >= endTime && type === 'countdown') {\r\n      this.handleEnd();\r\n      return;\r\n    }\r\n    if (isRunning) {\r\n      this.setState({\r\n        currentTime: currentTime + Date.now() - prevTime,\r\n        prevTime: Date.now(),\r\n      });\r\n      requestAnimationFrame(this.proccessTime);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { currentTime, isRunning, endTime } = this.state;\r\n    const { type } = this.props;\r\n    const progress = (currentTime / endTime) * 100;\r\n    const startButton = (\r\n      <Button type=\"primary\" onClick={this.handleStart}>\r\n        Start\r\n      </Button>\r\n    );\r\n    const pauseButton = (\r\n      <Button type=\"primary\" onClick={this.handlePause}>\r\n        Pause\r\n      </Button>\r\n    );\r\n    const inputBlock = (\r\n      <div className=\"inputBlock\">\r\n        <InputTime {...this.state} onSecChange={this.onSecChange} onMinChange={this.onMinChange} />\r\n        <SliderTime {...this.state} onSliderChange={this.onSliderChange} />\r\n      </div>\r\n    );\r\n    return (\r\n      <div className=\"stopwatch\">\r\n        {type === 'countdown' && inputBlock}\r\n        <Title>{this.formatDate(Math.abs(endTime - currentTime))}</Title>\r\n        {isRunning ? pauseButton : startButton}\r\n        <Button type=\"danger\" onClick={this.handleReset}>\r\n          Reset\r\n        </Button>\r\n        {endTime > 0 && (\r\n          <Row type=\"flex\" justify=\"center\">\r\n            <Col span={6}>\r\n              <Progress percent={Math.floor(progress)} status=\"active\" />\r\n            </Col>\r\n          </Row>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nTimer.propTypes = {\r\n  type: PropTypes.string,\r\n};\r\n\r\nTimer.defaultProps = {\r\n  type: 'stopwatch',\r\n};\r\n\r\nexport default Timer;\r\n","import React from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport { Tabs } from 'antd';\nimport Timer from './components/Timer';\n\nconst { TabPane } = Tabs;\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Tabs defaultActiveKey=\"1\">\n        <TabPane tab=\"Timer\" key=\"1\">\n          <Timer />\n        </TabPane>\n        <TabPane tab=\"Countdown\" key=\"2\">\n          <Timer type=\"countdown\" />\n        </TabPane>\n      </Tabs>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}