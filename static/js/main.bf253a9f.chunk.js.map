{"version":3,"sources":["audio/ding.mp3","functions/index.js","components/InputTime.jsx","components/SliderTime.jsx","components/Timer.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","formatDate","date","milliSec","Date","getMilliseconds","slice","sec","getSeconds","min","getMinutes","hour","getUTCHours","InputTime","props","onMinChange","onSecChange","endTime","isEnd","minutes","Math","floor","seconds","getUTCSeconds","type","justify","align","onChange","formatter","val","parser","Number","value","disabled","size","max","style","fontSize","SliderTime","onSliderChange","span","step","tipFormatter","Title","Typography","Timer","state","isRunning","frameId","currentTime","prevTime","setState","isNumeric","isNaN","parseInt","isFinite","playSound","Audio","sound","play","newEndTime","setUTCHours","setSeconds","handleStart","now","proccessTime","handlePause","handleReset","requestAnimationFrame","this","cancelAnimationFrame","progress","startButton","onClick","pauseButton","inputBlock","className","abs","percent","status","Component","defaultProps","TabPane","Tabs","App","defaultActiveKey","tab","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+GAAAA,EAAOC,QAAU,IAA0B,kC,sRCO5BC,EAPI,SAAAC,GACjB,IAAMC,EAAW,YAAK,IAAIC,KAAKF,GAAMG,mBAAoBC,OAAO,GAC1DC,EAAM,WAAI,IAAIH,KAAKF,GAAMM,cAAeF,OAAO,GAC/CG,EAAM,WAAI,IAAIL,KAAKF,GAAMQ,cAAeJ,OAAO,GAC/CK,EAAO,WAAI,IAAIP,KAAKF,GAAMU,eAAgBN,OAAO,GACvD,MAAM,GAAN,OAAUK,EAAV,YAAkBF,EAAlB,YAAyBF,EAAzB,YAAgCJ,I,2BCyCnBU,EA1CG,SAAAC,GAAU,IAClBC,EAA6CD,EAA7CC,YAAaC,EAAgCF,EAAhCE,YAAaC,EAAmBH,EAAnBG,QAASC,EAAUJ,EAAVI,MACrCC,EAAUC,KAAKC,MAAMJ,EAAU,IAAO,IACtCK,EAAU,IAAIlB,KAAKa,GAASM,gBAClC,OACE,kBAAC,IAAD,CAAKC,KAAK,OAAOC,QAAQ,SAASC,MAAM,UACtC,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,SAAUZ,EACVa,UAAW,SAAAC,GAAG,OAAKA,GAAO,IAAMA,EAAM,WAAIA,GAAMvB,OAAO,IACvDwB,OAAQ,SAAAD,GAAG,OAAIE,OAAOF,IACtBG,MAAOb,EACPc,UAAWf,EACXgB,KAAK,QACLzB,IAAK,EACL0B,IAAK,OAGT,kBAAC,IAAD,CAAKC,MAAO,CAAEC,SAAU,KAAxB,KACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEV,SAAUX,EACVY,UAAW,SAAAC,GAAG,MAAI,WAAIA,GAAMvB,OAAO,IACnCwB,OAAQ,SAAAD,GAAG,OAAIE,OAAOF,IACtBG,MAAOV,EACPW,UAAWf,EACXgB,KAAK,QACLzB,IAAK,EACL0B,IAAK,Q,SCDAG,EA1BI,SAAAxB,GAAU,IACnByB,EAAmCzB,EAAnCyB,eAAgBtB,EAAmBH,EAAnBG,QAASC,EAAUJ,EAAVI,MAC3BI,EAAUF,KAAKC,MAAMJ,EAAU,KAErC,OACE,kBAAC,IAAD,CAAKO,KAAK,OAAOC,QAAQ,UACvB,kBAAC,IAAD,CAAKe,KAAM,GACT,kBAAC,IAAD,CACEC,KAAM,GACNN,IAAK,KACLF,UAAWf,EACXc,MAAOV,EACPK,SAAUY,EACVG,aAAc,kBAAMzC,EAAWgB,GAASX,MAAM,GAAI,SCVpDqC,EAAUC,IAAVD,MAEFE,E,2MACJC,MAAQ,CACNC,WAAW,EACX7B,OAAO,EACP8B,QAAS,KACTC,YAAa,EACbC,SAAU,EACVjC,QAAS,G,EASXsB,eAAiB,SAAAP,GAAK,OAAI,EAAKmB,SAAS,CAAElC,QAAiB,IAARe,K,EAEnDoB,UAAY,SAAAvB,GAAG,OAAKE,OAAOsB,MAAMC,SAASzB,EAAK,MAAQE,OAAOwB,SAAS1B,I,EAEvE2B,UAAY,WACU,IAAIC,MAAMC,KAClBC,Q,EAGd5C,YAAc,SAAAiB,GACZ,GAAK,EAAKoB,UAAUpB,MAAUA,GAAS,KAAvC,CADqB,IAIbf,EAAY,EAAK6B,MAAjB7B,QACF2C,EAAa,IAAIxD,KAAKa,GAAS4C,YAAY,EAAG,GAAa,GAAR7B,EAAa,IACtE,EAAKmB,SAAS,CAAElC,QAAS2C,M,EAG3B5C,YAAc,SAAAgB,GACZ,GAAK,EAAKoB,UAAUpB,MAAUA,GAAS,IAAvC,CADqB,IAIbf,EAAY,EAAK6B,MAAjB7B,QACF2C,EAAa,IAAIxD,KAAKa,GAAS6C,WAAW,GAAa,IAAR9B,EACrD,EAAKmB,SAAS,CAAElC,QAAS2C,M,EAG3BG,YAAc,WAAO,IACX9C,EAAY,EAAK6B,MAAjB7B,QACAO,EAAS,EAAKV,MAAdU,MACHP,GAAoB,cAATO,IAGhB,EAAK2B,SACH,CACEJ,WAAW,EACX7B,OAAO,EACPgC,SAAU9C,KAAK4D,OAEjB,EAAKC,e,EAITC,YAAc,kBAAM,EAAKf,SAAS,CAAEJ,WAAW,K,EAE/CoB,YAAc,kBACZ,EAAKhB,SAAS,CACZJ,WAAW,EACX7B,OAAO,EACP+B,YAAa,EACbC,SAAU,EACVjC,QAAS,K,EAGbgD,aAAe,WAAO,IAAD,EACmC,EAAKnB,MAAnDC,EADW,EACXA,UAAWG,EADA,EACAA,SAAUD,EADV,EACUA,YAAahC,EADvB,EACuBA,QAClCO,EAAS,EAAKV,MAAdU,KAER,GAAIuB,EAAW,CACb,GAAIE,GAAehC,GAAoB,cAATO,EAG5B,OAFA,EAAKgC,iBACL,EAAKW,cAGP,EAAKhB,SAAS,CACZF,YAAaA,EAAc7C,KAAK4D,MAAQd,EACxCA,SAAU9C,KAAK4D,MACfhB,QAASoB,sBAAsB,EAAKH,kB,sFAzElB,IACdjB,EAAYqB,KAAKvB,MAAjBE,QACRsB,qBAAqBtB,GACrBqB,KAAKlB,SAAS,CAAEH,QAAS,S,+BA2EjB,IAAD,EACqCqB,KAAKvB,MAAzCG,EADD,EACCA,YAAaF,EADd,EACcA,UAAW9B,EADzB,EACyBA,QACxBO,EAAS6C,KAAKvD,MAAdU,KACF+C,EAAYtB,EAAchC,EAAW,IACrCuD,EACJ,kBAAC,IAAD,CAAQhD,KAAK,UAAUiD,QAASJ,KAAKN,aAArC,SAIIW,EACJ,kBAAC,IAAD,CAAQlD,KAAK,UAAUiD,QAASJ,KAAKH,aAArC,SAIIS,EACJ,yBAAKC,UAAU,cACb,kBAAC,EAAD,iBAAeP,KAAKvB,MAApB,CAA2B9B,YAAaqD,KAAKrD,YAAaD,YAAasD,KAAKtD,eAC5E,kBAAC,EAAD,iBAAgBsD,KAAKvB,MAArB,CAA4BP,eAAgB8B,KAAK9B,mBAGrD,OACE,yBAAKqC,UAAU,aACH,cAATpD,GAAwBmD,EACzB,kBAAChC,EAAD,KAAQ1C,EAAWmB,KAAKyD,IAAI5D,EAAUgC,KACrCF,EAAY2B,EAAcF,EAC3B,kBAAC,IAAD,CAAQhD,KAAK,SAASiD,QAASJ,KAAKF,aAApC,SAGClD,EAAU,GACT,kBAAC,IAAD,CAAKO,KAAK,OAAOC,QAAQ,UACvB,kBAAC,IAAD,CAAKe,KAAM,GACT,kBAAC,IAAD,CAAUsC,QAAS1D,KAAKC,MAAMkD,GAAWQ,OAAO,kB,GAvH1CC,aAoIpBnC,EAAMoC,aAAe,CACnBzD,KAAM,aAGOqB,QC5IPqC,EAAYC,IAAZD,QAiBOE,MAff,WACE,OACE,yBAAKR,UAAU,OACb,kBAAC,IAAD,CAAMS,iBAAiB,KACrB,kBAACH,EAAD,CAASI,IAAI,QAAQC,IAAI,KACvB,kBAAC,EAAD,OAEF,kBAACL,EAAD,CAASI,IAAI,YAAYC,IAAI,KAC3B,kBAAC,EAAD,CAAO/D,KAAK,kBCJFgE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.bf253a9f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ding.fce0c803.mp3\";","const formatDate = date => {\r\n  const milliSec = `00${new Date(date).getMilliseconds()}`.slice(-3);\r\n  const sec = `0${new Date(date).getSeconds()}`.slice(-2);\r\n  const min = `0${new Date(date).getMinutes()}`.slice(-2);\r\n  const hour = `0${new Date(date).getUTCHours()}`.slice(-2);\r\n  return `${hour}:${min}:${sec}.${milliSec}`;\r\n};\r\nexport default formatDate;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Row, Col, InputNumber } from 'antd';\r\n\r\nconst InputTime = props => {\r\n  const { onMinChange, onSecChange, endTime, isEnd } = props;\r\n  const minutes = Math.floor(endTime / 1000 / 60);\r\n  const seconds = new Date(endTime).getUTCSeconds();\r\n  return (\r\n    <Row type=\"flex\" justify=\"center\" align=\"middle\">\r\n      <Col>\r\n        <InputNumber\r\n          onChange={onMinChange}\r\n          formatter={val => (val >= 100 ? val : `0${val}`.slice(-2))}\r\n          parser={val => Number(val)}\r\n          value={minutes}\r\n          disabled={!isEnd}\r\n          size=\"large\"\r\n          min={0}\r\n          max={719}\r\n        />\r\n      </Col>\r\n      <Col style={{ fontSize: 40 }}>:</Col>\r\n      <Col>\r\n        <InputNumber\r\n          onChange={onSecChange}\r\n          formatter={val => `0${val}`.slice(-2)}\r\n          parser={val => Number(val)}\r\n          value={seconds}\r\n          disabled={!isEnd}\r\n          size=\"large\"\r\n          min={0}\r\n          max={59}\r\n        />\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nInputTime.propTypes = {\r\n  onMinChange: PropTypes.func.isRequired,\r\n  onSecChange: PropTypes.func.isRequired,\r\n  isEnd: PropTypes.bool.isRequired,\r\n  endTime: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default InputTime;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Row, Col, Slider } from 'antd';\r\nimport formatDate from '../functions';\r\n\r\nconst SliderTime = props => {\r\n  const { onSliderChange, endTime, isEnd } = props;\r\n  const seconds = Math.floor(endTime / 1000);\r\n\r\n  return (\r\n    <Row type=\"flex\" justify=\"center\">\r\n      <Col span={6}>\r\n        <Slider\r\n          step={15}\r\n          max={3600}\r\n          disabled={!isEnd}\r\n          value={seconds}\r\n          onChange={onSliderChange}\r\n          tipFormatter={() => formatDate(endTime).slice(0, -4)}\r\n        />\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nSliderTime.propTypes = {\r\n  onSliderChange: PropTypes.func.isRequired,\r\n  isEnd: PropTypes.bool.isRequired,\r\n  endTime: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default SliderTime;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button, Typography, Progress, Row, Col } from 'antd';\r\nimport formatDate from '../functions';\r\nimport sound from '../audio/ding.mp3';\r\nimport InputTime from './InputTime';\r\nimport SliderTime from './SliderTime';\r\n\r\nconst { Title } = Typography;\r\n\r\nclass Timer extends Component {\r\n  state = {\r\n    isRunning: false,\r\n    isEnd: true,\r\n    frameId: null,\r\n    currentTime: 0,\r\n    prevTime: 0,\r\n    endTime: 0,\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    const { frameId } = this.state;\r\n    cancelAnimationFrame(frameId);\r\n    this.setState({ frameId: null });\r\n  }\r\n\r\n  onSliderChange = value => this.setState({ endTime: value * 1000 });\r\n\r\n  isNumeric = val => !Number.isNaN(parseInt(val, 10)) && Number.isFinite(val);\r\n\r\n  playSound = () => {\r\n    const audioEffect = new Audio(sound);\r\n    audioEffect.play();\r\n  };\r\n\r\n  onMinChange = value => {\r\n    if (!this.isNumeric(value) || value >= 720) {\r\n      return;\r\n    }\r\n    const { endTime } = this.state;\r\n    const newEndTime = new Date(endTime).setUTCHours(0, 0) + value * 60 * 1000;\r\n    this.setState({ endTime: newEndTime });\r\n  };\r\n\r\n  onSecChange = value => {\r\n    if (!this.isNumeric(value) || value >= 60) {\r\n      return;\r\n    }\r\n    const { endTime } = this.state;\r\n    const newEndTime = new Date(endTime).setSeconds(0) + value * 1000;\r\n    this.setState({ endTime: newEndTime });\r\n  };\r\n\r\n  handleStart = () => {\r\n    const { endTime } = this.state;\r\n    const { type } = this.props;\r\n    if (!endTime && type === 'countdown') {\r\n      return;\r\n    }\r\n    this.setState(\r\n      {\r\n        isRunning: true,\r\n        isEnd: false,\r\n        prevTime: Date.now(),\r\n      },\r\n      this.proccessTime\r\n    );\r\n  };\r\n\r\n  handlePause = () => this.setState({ isRunning: false });\r\n\r\n  handleReset = () =>\r\n    this.setState({\r\n      isRunning: false,\r\n      isEnd: true,\r\n      currentTime: 0,\r\n      prevTime: 0,\r\n      endTime: 0,\r\n    });\r\n\r\n  proccessTime = () => {\r\n    const { isRunning, prevTime, currentTime, endTime } = this.state;\r\n    const { type } = this.props;\r\n\r\n    if (isRunning) {\r\n      if (currentTime >= endTime && type === 'countdown') {\r\n        this.playSound();\r\n        this.handleReset();\r\n        return;\r\n      }\r\n      this.setState({\r\n        currentTime: currentTime + Date.now() - prevTime,\r\n        prevTime: Date.now(),\r\n        frameId: requestAnimationFrame(this.proccessTime),\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { currentTime, isRunning, endTime } = this.state;\r\n    const { type } = this.props;\r\n    const progress = (currentTime / endTime) * 100;\r\n    const startButton = (\r\n      <Button type=\"primary\" onClick={this.handleStart}>\r\n        Start\r\n      </Button>\r\n    );\r\n    const pauseButton = (\r\n      <Button type=\"primary\" onClick={this.handlePause}>\r\n        Pause\r\n      </Button>\r\n    );\r\n    const inputBlock = (\r\n      <div className=\"inputBlock\">\r\n        <InputTime {...this.state} onSecChange={this.onSecChange} onMinChange={this.onMinChange} />\r\n        <SliderTime {...this.state} onSliderChange={this.onSliderChange} />\r\n      </div>\r\n    );\r\n    return (\r\n      <div className=\"stopwatch\">\r\n        {type === 'countdown' && inputBlock}\r\n        <Title>{formatDate(Math.abs(endTime - currentTime))}</Title>\r\n        {isRunning ? pauseButton : startButton}\r\n        <Button type=\"danger\" onClick={this.handleReset}>\r\n          Reset\r\n        </Button>\r\n        {endTime > 0 && (\r\n          <Row type=\"flex\" justify=\"center\">\r\n            <Col span={6}>\r\n              <Progress percent={Math.floor(progress)} status=\"active\" />\r\n            </Col>\r\n          </Row>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nTimer.propTypes = {\r\n  type: PropTypes.string,\r\n};\r\n\r\nTimer.defaultProps = {\r\n  type: 'stopwatch',\r\n};\r\n\r\nexport default Timer;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport 'antd/dist/antd.css';\r\nimport { Tabs } from 'antd';\r\nimport Timer from './components/Timer';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Tabs defaultActiveKey=\"1\">\r\n        <TabPane tab=\"Timer\" key=\"1\">\r\n          <Timer />\r\n        </TabPane>\r\n        <TabPane tab=\"Countdown\" key=\"2\">\r\n          <Timer type=\"countdown\" />\r\n        </TabPane>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}